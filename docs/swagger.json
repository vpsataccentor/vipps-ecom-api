{
  "info": {
    "version": "1.0.4",
    "title": "Vipps eCommerce APIs",
    "description": "# Vipps eCommerce API\nAdditional API documentation: https://github.com/vippsas/vipps-ecom-api/\n"
  },
  "definitions": {
    "CustomerInfoDto": {
      "properties": {
        "mobileNumber": {
          "minLength": 8,
          "maxLength": 8,
          "description": "Mobile number of the user who has to pay for the transation from Vipps. Allowed format: xxxxxxxx",
          "example": 91234567,
          "pattern": "^\\d{8}$",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GetTransactionDetails": {
      "properties": {
        "transactionSummary": {
          "$ref": "#/definitions/TransactionSummary"
        },
        "orderId": {
          "example": "order123abc",
          "type": "string"
        },
        "userDetails": {
          "$ref": "#/definitions/UserDetails"
        },
        "shippingDetails": {
          "$ref": "#/definitions/PaymentShippingDetails"
        },
        "transactionLogHistory": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionLogHistory"
          }
        }
      },
      "type": "object"
    },
    "OrderStatusInfoTransactionInfo": {
      "properties": {
        "amount": {
          "format": "double",
          "example": 20000,
          "type": "number",
          "description": "Ordered amount in øre"
        },
        "timeStamp": {
          "example": "2018-12-12T11:18:38.246Z",
          "type": "string",
          "description": "Timestamp in ISO-8601 representing when Vipps cancelled the transaction."
        },
        "status": {
          "example": "RESERVE",
          "enum": [
            "INITIATE",
            "REGISTER",
            "RESERVE",
            "SALE",
            "CAPTURE",
            "REFUND",
            "CANCEL",
            "VOID",
            "FAILED",
            "REJECTED"
          ],
          "type": "string",
          "description": "Status which gives the current state of the payment within Vipps. See the [API guide](https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#responses-from-requests) for more information."
        },
        "transactionId": {
          "example": "5001420062",
          "type": "string",
          "description": "Vipps transaction id"
        }
      },
      "required": [
        "amount",
        "status",
        "timeStamp",
        "transactionId"
      ],
      "type": "object"
    },
    "TransactionLogHistory": {
      "properties": {
        "operation": {
          "example": "RESERVE",
          "enum": [
            "INITIATE",
            "RESERVE",
            "SALE",
            "CAPTURE",
            "REFUND",
            "CANCEL",
            "VOID"
          ],
          "type": "string",
          "description": "The operation that was performed for this log entry. See the [API guide](https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#responses-from-requests) for more information."
        },
        "timeStamp": {
          "type": "string"
        },
        "transactionText": {
          "type": "string"
        },
        "amount": {
          "format": "int32",
          "type": "integer"
        },
        "transactionId": {
          "type": "string"
        },
        "operationSuccess": {
          "type": "boolean"
        },
        "requestId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ShippingDetailsRequest": {
      "properties": {
        "shippingCost": {
          "format": "double",
          "type": "number",
          "description": "Shipping cost"
        },
        "address": {
          "$ref": "#/definitions/Address",
          "description": "Address Details"
        },
        "shippingMethod": {
          "type": "string",
          "description": "Shipping method which choosed for the payment"
        }
      },
      "required": [
        "address",
        "shippingCost",
        "shippingMethod"
      ],
      "type": "object"
    },
    "AuthorizationTokenMethod": {
      "type": "object"
    },
    "TransactionInfoCancel": {
      "properties": {
        "amount": {
          "format": "double",
          "example": 20000,
          "type": "number",
          "description": "Ordered amount in øre"
        },
        "timeStamp": {
          "example": "2018-12-12T11:18:38.246Z",
          "type": "string",
          "description": "Timestamp in ISO-8601 representing when vipps Cancelled transaction."
        },
        "transactionText": {
          "example": "One pair of Vipps socks",
          "type": "string",
          "description": "Transaction text reference provided by merchant"
        },
        "status": {
          "example": "Cancelled",
          "enum": [
            "Cancelled"
          ],
          "type": "string",
          "description": "Status which gives the current state of the payment within Vipps. See the [API guide](https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#responses-from-requests) for more information."
        },
        "transactionId": {
          "example": "5001420062",
          "type": "string",
          "description": "Vipps transaction id"
        }
      },
      "required": [
        "amount",
        "status",
        "timeStamp",
        "transactionId",
        "transactionText"
      ],
      "type": "object"
    },
    "Address": {
      "properties": {
        "addressLine1": {
          "example": "Dronning Eufemias gate 42",
          "type": "string",
          "description": "Address Line 1"
        },
        "addressLine2": {
          "example": "Att: Rune Garborg",
          "type": "string",
          "description": "Address Line 2"
        },
        "country": {
          "example": "NO",
          "type": "string",
          "description": "Country,default=NO"
        },
        "zipCode": {
          "example": "0191",
          "type": "string",
          "description": "Zip Code"
        },
        "city": {
          "example": "Oslo",
          "type": "string",
          "description": "City"
        }
      },
      "required": [
        "addressLine1",
        "city",
        "country",
        "zipCode"
      ],
      "type": "object"
    },
    "MerchantInfoDto": {
      "properties": {
        "shippingDetailsPrefix": {
          "maxLength": 255,
          "example": "https://example.com/vipps/shipping/",
          "type": "string",
          "description": "In case of express checkout payment, merchant should pass this prefix to let Vipps fetch shipping cost and method related details. Vipps will add `/v2/payments/{orderId}/shippingDetails` to the end or this URL."
        },
        "isApp": {
          "example": false,
          "type": "boolean",
          "default": false,
          "description": "This parameter indicates whether payment request is triggered from Mobile App or Web browser. Based on this value, response will be redirect URL for Vipps landing page or deeplink URL to connect vipps App. When isApp is set to true, URLs passed to Vipps will not be validated as regular URLs."
        },
        "paymentType": {
          "example": "eComm Regular Payment",
          "enum": [
            "eComm Regular Payment",
            "eComm Express Payment"
          ],
          "type": "string",
          "default": "eComm Regular Payment",
          "description": "This parameter will identify difference between a regular ecomm payment and ecomm express payment. For express checkout, use: \"eComm Express Payment\". Express checkouts require consentRemovalPrefix."
        },
        "authToken": {
          "maxLength": 255,
          "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1Ni <snip>",
          "type": "string",
          "description": "The Merchant should share this token if merchant has authentication mechanism in place which could be used for making callbacks secure."
        },
        "fallBack": {
          "maxLength": 255,
          "example": "https://example.com/vipps/fallback/order123abc",
          "type": "string",
          "description": "Vipps will use the fall back URL to redirect Merchant Page once Payment is completed in Vipps System URLs passed to Vipps should be URL-encoded, and must validate with the Apache Commons [UrlValidator](https://commons.apache.org/proper/commons-validator/apidocs/org/apache/commons/validator/routines/UrlValidator.html)."
        },
        "merchantSerialNumber": {
          "minLength": 6,
          "maxLength": 6,
          "description": "Unique id for this merchant's sales channel: website, mobile app etc. Short name: MSN.",
          "example": 123456,
          "pattern": "^\\d{6}$",
          "type": "string"
        },
        "consentRemovalPrefix": {
          "maxLength": 255,
          "example": "https://example.com/vipps",
          "type": "string",
          "description": "Required for expess checkout payments. This callback URL will be used by Vipps to inform the merchant that the user has revoked his/her consent: This Vipps user does do not want the merchant to store or use his/her personal information anymore. Required by GDPR. Vipps will add `/v2/consents/{userId}` to the end or this URL. URLs passed to Vipps should be URL-encoded, and must validate with the Apache Commons [UrlValidator](https://commons.apache.org/proper/commons-validator/apidocs/org/apache/commons/validator/routines/UrlValidator.html)."
        },
        "callbackPrefix": {
          "maxLength": 255,
          "example": "https://example.com/vipps/callbacks",
          "type": "string",
          "description": "This is an URL for receiving the callback after the payment request. Domain name and context path should be provided by merchant as the value for this parameter. Vipps will add `/v2/payments/{orderId}` to the end or this URL. URLs passed to Vipps should be URL-encoded, and must validate with the Apache Commons [UrlValidator](https://commons.apache.org/proper/commons-validator/apidocs/org/apache/commons/validator/routines/UrlValidator.html)."
        }
      },
      "required": [
        "callbackPrefix",
        "fallBack",
        "merchantSerialNumber"
      ],
      "type": "object"
    },
    "FetchShippingCostAndMethod": {
      "properties": {
        "addressLine1": {
          "example": "Dronning Eufemias gate 42",
          "type": "string"
        },
        "addressType": {
          "example": "H",
          "type": "string"
        },
        "addressId": {
          "format": "int32",
          "type": "integer",
          "description": "Vipps Provided address Id. To be returned in response in the same field"
        },
        "city": {
          "example": "Oslo",
          "type": "string",
          "description": "City"
        },
        "country": {
          "example": "NO",
          "type": "string",
          "description": "The only country supported is Norway"
        },
        "addressLine2": {
          "type": "string"
        },
        "postalCode": {
          "format": "int32",
          "example": "0191",
          "pattern": "^\\df{4}$",
          "type": "integer",
          "description": "Four digits"
        },
        "postCode": {
          "format": "int32",
          "example": "0191",
          "pattern": "^\\df{4}$",
          "type": "integer",
          "description": "Four digits"
        }
      },
      "required": [
        "addressId",
        "addressLine1",
        "city",
        "country",
        "postCode"
      ],
      "type": "object"
    },
    "UserDetails": {
      "properties": {
        "mobileNumber": {
          "minLength": 8,
          "maxLength": 12,
          "pattern": "^\\d{8,12}$",
          "type": "string",
          "description": "12345678"
        },
        "userId": {
          "example": "1234567",
          "type": "string",
          "description": "1234567"
        },
        "firstName": {
          "example": "Ada",
          "type": "string",
          "description": "First name"
        },
        "bankIdVerified": {
          "type": "string"
        },
        "dateOfBirth": {
          "example": "12-3-1988",
          "type": "string",
          "description": "12-3-1988"
        },
        "lastName": {
          "example": "Lovelace",
          "type": "string",
          "description": "Last name"
        },
        "email": {
          "example": "user@example.com",
          "type": "string",
          "description": "Email address"
        },
        "ssn": {
          "minLength": 11,
          "maxLength": 11,
          "pattern": "^\\d{11}$",
          "type": "string",
          "description": "12345678912"
        }
      },
      "required": [
        "email",
        "firstName",
        "lastName",
        "mobileNumber",
        "userId"
      ],
      "type": "object"
    },
    "TransactionResponseCancel": {
      "properties": {
        "transactionSummary": {
          "$ref": "#/definitions/TransactionSummary"
        },
        "transactionInfo": {
          "$ref": "#/definitions/TransactionInfoCancel"
        },
        "orderId": {
          "maxLength": 30,
          "example": "order123abc",
          "type": "string",
          "description": "Id which uniquely identifies a payment. Maximum length is 30 alphanumeric characters"
        }
      },
      "required": [
        "orderId"
      ],
      "type": "object"
    },
    "TransactionInfoInitiateDTO": {
      "properties": {
        "amount": {
          "format": "int32",
          "example": 20000,
          "pattern": "^\\d{3,}$",
          "type": "integer",
          "description": "Amount in øre. 32 bit Integer (2147483647)"
        },
        "timeStamp": {
          "format": "date-time",
          "example": "2018-11-14T15:44:26.590Z",
          "type": "string",
          "description": "ISO formatted date time string."
        },
        "orderId": {
          "maxLength": 30,
          "example": "order123abc",
          "type": "string",
          "description": "Id which uniquely identifies a payment. Maximum length is 30 alphanumeric characters."
        },
        "transactionText": {
          "maxLength": 100,
          "example": "One pair of Vipps socks",
          "type": "string",
          "description": "Transaction text that can be displayed to end user"
        },
        "refOrderId": {
          "maxLength": 30,
          "example": "merchantOrder123abc",
          "type": "string",
          "description": "Identifies if the payment references to some past orders registered with Vipps. If defined, transactions for this payment will show up as child transactions of the specified order."
        }
      },
      "required": [
        "amount",
        "orderId",
        "transactionText"
      ],
      "type": "object"
    },
    "CancelPaymentActionRequest": {
      "properties": {
        "transaction": {
          "$ref": "#/definitions/CancelTransaction"
        },
        "merchantInfo": {
          "$ref": "#/definitions/MerchantInfoPayment"
        }
      },
      "type": "object"
    },
    "MerchantInfoPayment": {
      "properties": {
        "merchantSerialNumber": {
          "minLength": 6,
          "maxLength": 6,
          "description": "Unique id for this merchant's sales channel: website, mobile app etc. Short name: MSN.",
          "example": 123456,
          "pattern": "^\\d{6}$",
          "type": "string"
        }
      },
      "required": [
        "merchantSerialNumber"
      ],
      "type": "object"
    },
    "TransactionResponseCapture": {
      "properties": {
        "transactionSummary": {
          "$ref": "#/definitions/TransactionSummary"
        },
        "transactionInfo": {
          "$ref": "#/definitions/TransactionInfoCapture"
        },
        "orderId": {
          "maxLength": 30,
          "example": "order123abc",
          "type": "string",
          "description": "Id which uniquely identifies a payment. Maximum length is 30 alphanumeric characters"
        }
      },
      "required": [
        "orderId"
      ],
      "type": "object"
    },
    "ShippingDetails": {
      "properties": {
        "shippingCost": {
          "format": "double",
          "type": "number"
        },
        "shippingMethodId": {
          "type": "string"
        },
        "isDefault": {
          "enum": [
            "Y",
            "N"
          ],
          "type": "string"
        },
        "priority": {
          "format": "int32",
          "type": "integer"
        },
        "shippingMethod": {
          "type": "string"
        }
      },
      "required": [
        "isDefault",
        "shippingCost",
        "shippingMethod",
        "shippingMethodId"
      ],
      "type": "object"
    },
    "PaymentShippingDetails": {
      "properties": {
        "shippingCost": {
          "format": "double",
          "example": 1500,
          "type": "number",
          "description": "Shipping Cost"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "shippingMethod": {
          "example": "Posten",
          "type": "string",
          "description": "Shipping method"
        }
      },
      "required": [
        "shippingCost",
        "shippingMethod"
      ],
      "type": "object"
    },
    "TransactionSummary": {
      "properties": {
        "remainingAmountToCapture": {
          "format": "int32",
          "example": 0,
          "type": "integer",
          "description": "Total remaining amount to capture"
        },
        "capturedAmount": {
          "format": "int32",
          "example": 20000,
          "type": "integer",
          "description": "Total amount captured"
        },
        "refundedAmount": {
          "format": "int32",
          "example": 0,
          "type": "integer",
          "description": "Total refunded amount of the order"
        },
        "remainingAmountToRefund": {
          "format": "int32",
          "example": 20000,
          "type": "integer",
          "description": "Total remaining amount to refund"
        }
      },
      "required": [
        "capturedAmount",
        "refundedAmount",
        "remainingAmountToCapture",
        "remainingAmountToRefund"
      ],
      "type": "object"
    },
    "Transaction": {
      "properties": {
        "amount": {
          "format": "int32",
          "example": 20000,
          "pattern": "^\\d{3,}$",
          "type": "integer",
          "description": "Amount in øre, if amount is 0 or not provided then full capture will be performed. 32 Bit Integer (2147483647)"
        },
        "transactionText": {
          "type": "string",
          "description": "Proof of delivery"
        }
      },
      "required": [
        "transactionText"
      ],
      "type": "object"
    },
    "TransactionInfoRefund": {
      "properties": {
        "amount": {
          "format": "double",
          "example": 20000,
          "type": "number",
          "description": "Ordered amount in øre"
        },
        "timeStamp": {
          "example": "2018-12-12T11:18:38.246Z",
          "type": "string",
          "description": "Timestamp in ISO-8601 representing when vipps Cancelled transaction."
        },
        "transactionText": {
          "example": "One pair of Vipps socks",
          "type": "string",
          "description": "Transaction text reference provided by merchant"
        },
        "status": {
          "example": "Refund",
          "enum": [
            "Refund"
          ],
          "type": "string",
          "description": "Status which gives the current state of the payment within Vipps. See the [API guide](https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#responses-from-requests) for more information."
        },
        "transactionId": {
          "example": "5001420062",
          "type": "string",
          "description": "Vipps transaction id"
        }
      },
      "required": [
        "amount",
        "status",
        "timeStamp",
        "transactionId",
        "transactionText"
      ],
      "type": "object"
    },
    "InitiatePaymentV2Representation": {
      "properties": {
        "url": {
          "example": "https://example.com",
          "type": "string",
          "description": "URL parameter will have URL to redirect the request to vipps gateway page in case request is trigger from web browser or deeplink URL to open vipps app incase request is triggered from Merchant Mobile App."
        },
        "orderId": {
          "example": "order123abc",
          "type": "string",
          "description": "Id which uniquely identifies a payment. Maximum length is 30 alphanumeric characters."
        }
      },
      "required": [
        "orderId",
        "url"
      ],
      "type": "object"
    },
    "FetchShippingCostResponse": {
      "properties": {
        "orderId": {
          "example": "order123abc",
          "type": "string"
        },
        "addressId": {
          "format": "int32",
          "type": "integer"
        },
        "shippingDetails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShippingDetails"
          }
        }
      },
      "required": [
        "addressId",
        "orderId",
        "shippingDetails"
      ],
      "type": "object"
    },
    "CallbackTransactionInfoStatus": {
      "properties": {
        "amount": {
          "format": "double",
          "example": 20000,
          "type": "number",
          "description": "Ordered amount in øre"
        },
        "timeStamp": {
          "example": "2018-12-12T11:18:38.246Z",
          "type": "string",
          "description": "Timestamp in ISO-8601 representing when Vipps cancelled the transaction."
        },
        "status": {
          "example": "RESERVE",
          "enum": [
            "RESERVE",
            "SALE",
            "CANCELLED",
            "REJECTED"
          ],
          "type": "string",
          "description": "Status which gives the current state of the payment within Vipps. See the [API guide](https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#callbacks) for more information."
        },
        "transactionId": {
          "example": "5001420062",
          "type": "string",
          "description": "Vipps transaction id"
        }
      },
      "required": [
        "amount",
        "status",
        "timeStamp",
        "transactionId"
      ],
      "type": "object"
    },
    "TransactionResponseRefund": {
      "properties": {
        "transactionSummary": {
          "$ref": "#/definitions/TransactionSummary"
        },
        "orderId": {
          "maxLength": 30,
          "example": "order123abc",
          "type": "string",
          "description": "Id which uniquely identifies a payment. Maximum length is 30 alphanumeric characters"
        },
        "transaction": {
          "$ref": "#/definitions/TransactionInfoRefund"
        }
      },
      "required": [
        "orderId"
      ],
      "type": "object"
    },
    "PaymentActionsRequest": {
      "properties": {
        "transaction": {
          "$ref": "#/definitions/Transaction"
        },
        "merchantInfo": {
          "$ref": "#/definitions/MerchantInfoPayment"
        }
      },
      "type": "object"
    },
    "InitiatePaymentCommand": {
      "properties": {
        "customerInfo": {
          "$ref": "#/definitions/CustomerInfoDto",
          "description": "it has customer information and it is not required"
        },
        "transaction": {
          "$ref": "#/definitions/TransactionInfoInitiateDTO",
          "description": "it has transaction details which needs to be inititated"
        },
        "merchantInfo": {
          "$ref": "#/definitions/MerchantInfoDto",
          "description": "it has merchant related information to initiate the payment"
        }
      },
      "required": [
        "customerInfo",
        "merchantInfo",
        "transaction"
      ],
      "type": "object"
    },
    "GetPaymentStatusResponse": {
      "properties": {
        "transactionInfo": {
          "$ref": "#/definitions/OrderStatusInfoTransactionInfo"
        },
        "orderId": {
          "example": "order123abc",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CancelTransaction": {
      "properties": {
        "transactionText": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "TransactionInfoCapture": {
      "properties": {
        "amount": {
          "format": "double",
          "example": 20000,
          "type": "number",
          "description": "Ordered amount in øre"
        },
        "timeStamp": {
          "example": "2018-12-12T11:18:38.246Z",
          "type": "string",
          "description": "Timestamp in ISO-8601 representing when vipps Cancelled transaction."
        },
        "transactionText": {
          "example": "One pair of Vipps socks",
          "type": "string",
          "description": "Transaction text reference provided by merchant"
        },
        "status": {
          "example": "Captured",
          "enum": [
            "Captured"
          ],
          "type": "string",
          "description": "Status which gives the current state of the payment within Vipps. See the [API guide](https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#responses-from-requests) for more information."
        },
        "transactionId": {
          "example": "5001420062",
          "type": "string",
          "description": "Vipps transaction id"
        }
      },
      "required": [
        "amount",
        "status",
        "timeStamp",
        "transactionId",
        "transactionText"
      ],
      "type": "object"
    },
    "AuthorizationTokenResponse": {
      "properties": {
        "expires_on": {
          "example": 1547823408,
          "type": "integer"
        },
        "resource": {
          "example": "00000002-0000-0000-c000-000000000000",
          "type": "string"
        },
        "expires_in": {
          "example": 3600,
          "type": "integer"
        },
        "ext_expires_in": {
          "example": 3600,
          "type": "integer"
        },
        "not_before": {
          "example": 1547819508,
          "type": "integer"
        },
        "access_token": {
          "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1Ni <snip>",
          "type": "string"
        },
        "token_type": {
          "example": "Bearer",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ExpressCheckOutPaymentRequest": {
      "properties": {
        "transactionInfo": {
          "$ref": "#/definitions/CallbackTransactionInfoStatus"
        },
        "orderId": {
          "example": "order123abc",
          "type": "string",
          "description": "Id which uniquely identifies a payment. Maximum length is 30 alphanumeric characters"
        },
        "userDetails": {
          "$ref": "#/definitions/UserDetails",
          "description": "Vipps User Information"
        },
        "merchantSerialNumber": {
          "minLength": 6,
          "maxLength": 6,
          "description": "Unique id for this merchant's sales channel: website, mobile app etc. Short name: MSN.",
          "example": 123456,
          "pattern": "^\\d{6}$",
          "type": "string"
        },
        "shippingDetails": {
          "$ref": "#/definitions/ShippingDetailsRequest",
          "description": "Shipping Details will be added in the call back request if the payment is Express Checkout"
        }
      },
      "required": [
        "merchantSerialNumber",
        "orderId",
        "shippingDetails",
        "userDetails"
      ],
      "type": "object"
    }
  },
  "host": "apitest.vipps.no",
  "paths": {
    "/ecomm/v2/payments/{orderId}/capture": {
      "post": {
        "summary": "Capture Payment ",
        "description": "This API call allows merchant to capture the reserved amount. Amount to capture cannot be higher than reserved. The API also allows capturing partial amount of the reserved amount. Partial capture can be called as many times as required so long there is reserved amount to capture. Transaction text is not optional and is used as a proof of delivery (tracking code, consignment number etc.). In a case of direct capture, both fund reservation and capture are executed in a single operation.",
        "responses": {
          "405": {
            "description": "Request method not supported"
          },
          "500": {
            "description": "Something went wrong from Vipps Server side"
          },
          "402": {
            "description": "Payment Failed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "400": {
            "description": "Bad request (Missing a required parameter or bad request format)"
          },
          "403": {
            "description": "Request Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/TransactionResponseCapture"
            },
            "description": "Capture payment response"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "operationId": "capturePaymentUsingPOST",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "type": "string",
            "description": "Order id specified in the request body of initiate payment.",
            "in": "path"
          },
          {
            "name": "authorization",
            "required": true,
            "type": "string",
            "description": "Authorization-token is obtained by running the /accesstoken/get request.",
            "in": "header"
          },
          {
            "name": "content-type",
            "required": true,
            "type": "string",
            "description": "`application/json`",
            "in": "header"
          },
          {
            "name": "ocp-apim-subscription-key",
            "required": true,
            "type": "string",
            "description": "The subscription-key for your product is located in the [developer portal](https://apitest-portal.vipps.no/). Click the username to the right on the page and select ```Profile``` from the dropdown. Find the relevant salesunit and copy the primary key.  See the [getting started guide](https://github.com/vippsas/vipps-developers/blob/master/vipps-developer-portal-getting-started.md) for full guide with images.",
            "in": "header"
          },
          {
            "schema": {
              "$ref": "#/definitions/PaymentActionsRequest"
            },
            "required": true,
            "name": "paymentActionsRequest",
            "description": "paymentActionsRequest",
            "in": "body"
          }
        ],
        "tags": [
          "Vipps eCom API"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ]
      }
    },
    "/accesstoken/get": {
      "post": {
        "summary": "Fetch authorization token",
        "description": "Authorization token API endpoint helps to get the JWT Bearer token that needs to be passed in every API request in the authorization header. The merchant application use the API to get a JWT access token. JWT access token is a base 64 encoded string value that must be aquire first before making any Vipps api calls",
        "responses": {
          "405": {
            "description": "Request method not supported"
          },
          "500": {
            "description": "Something went wrong from Vipps Server side"
          },
          "402": {
            "description": "Payment Failed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "400": {
            "description": "Bad request (Missing a required parameter or bad request format)"
          },
          "403": {
            "description": "Request Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/AuthorizationTokenResponse"
            },
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "operationId": "fetchAuthorizationTokenUsingPost",
        "parameters": [
          {
            "format": "guid",
            "required": true,
            "name": "client_id",
            "description": "Client id is located in the [developer portal](https://apitest-portal.vipps.no/). Navigate to the ```Applications``` tab and click the ```View secrets``` button to display the client id. See the [getting started guide](https://github.com/vippsas/vipps-developers/blob/master/vipps-developer-portal-getting-started.md) for full guide with images.",
            "type": "string",
            "in": "header"
          },
          {
            "name": "client_secret",
            "required": true,
            "type": "string",
            "description": "Client secret is located in the [developer portal](https://apitest-portal.vipps.no/). Navigate to the ```Applications``` tab and click the ```View secrets``` button to display the client id. See the [getting started guide](https://github.com/vippsas/vipps-developers/blob/master/vipps-developer-portal-getting-started.md) for full guide with images.",
            "in": "header"
          },
          {
            "name": "ocp-apim-subscription-key",
            "required": true,
            "type": "string",
            "description": "The subscription-key for authorization token is located in the [developer portal](https://apitest-portal.vipps.no/). Click the username to the right on the page and select ```Profile``` from the dropdown. The ```DEFAULT_ACCESSTOKEN``` key is the value for subscription-key. See the [getting started guide](https://github.com/vippsas/vipps-developers/blob/master/vipps-developer-portal-getting-started.md) for full guide with images.",
            "in": "header"
          }
        ],
        "tags": [
          "Authorization Service"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ]
      }
    },
    "[callbackPrefix]/v2/payments/{orderId}": {
      "post": {
        "summary": "Callback : Transaction Update",
        "description": "This API call allows Vipps to send the transaction details. During regular ecomm payment order and transaction details will be shared. During express checkout payment it will provide user details and shipping details addition to the order and transaction details. Vipps will add `/v2/payments/{orderId}` to the end of this URL. URLs passed to Vipps should be URL-encoded, and must validate with the Apache Commons [UrlValidator](https://commons.apache.org/proper/commons-validator/apidocs/org/apache/commons/validator/routines/UrlValidator.html).",
        "responses": {
          "405": {
            "description": "Request method not supported"
          },
          "500": {
            "description": "Something went wrong on the Vipps server side"
          },
          "402": {
            "description": "Payment Failed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "400": {
            "description": "Bad request (Missing a required parameter or bad request format)"
          },
          "403": {
            "description": "Request Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          },
          "200": {
            "description": "Callback : Transaction Update"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "operationId": "transactionUpdateCallbackForRegularPaymentUsingPOST",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "type": "string",
            "description": "orderId",
            "in": "path"
          },
          {
            "schema": {
              "$ref": "#/definitions/ExpressCheckOutPaymentRequest"
            },
            "required": true,
            "name": "expressCheckOutPaymentRequest",
            "description": "expressCheckOutPaymentRequest",
            "in": "body"
          }
        ],
        "tags": [
          "Endpoints required by Vipps from the merchant"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ]
      }
    },
    "[consentRemovalPrefix]/v2/consents/{userId}": {
      "delete": {
        "summary": "Remove User Consent (for express checkout)",
        "description": "This API endpoint on the merchant side allows Vipps to send consent removal requests to the merchant. When receiving requests the merchant is obliged to remove the user details permanently, as per the GDPR guidelines. Vipps will add `/v2/consents/{userId}` to the end of this URL. URLs passed to Vipps should be URL-encoded, and must validate with the Apache Commons [UrlValidator](https://commons.apache.org/proper/commons-validator/apidocs/org/apache/commons/validator/routines/UrlValidator.html).",
        "responses": {
          "405": {
            "description": "Request method not supported"
          },
          "500": {
            "description": "Something went wrong from Vipps Server side"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "400": {
            "description": "Bad request (Missing a required parameter or bad request format)"
          },
          "403": {
            "description": "Request Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          },
          "200": {
            "description": "Remove User Consent (for express checkout)"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "consumes": [
          "application/json"
        ],
        "operationId": "removeUserConsentUsingDELETE",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "type": "string",
            "description": "The userId provided when requesting user information from Vipps. Received by callback or get detail request.",
            "in": "path"
          }
        ],
        "tags": [
          "Endpoints required by Vipps from the merchant"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ]
      }
    },
    "[shippingDetailsPrefix]/v2/payments/{orderId}/shippingDetails": {
      "post": {
        "summary": "Fetch Shipping Cost & Method",
        "description": "This API endpoint on the merchant side allows Vipps to get the shipping cost and method based on the provided address and product details. The primary use of this service is Vipps Hurtigkasse (express checkout) where Vipps needs to present shipping cost and method to the Vipps user. Vipps will add `/v2/payments/{orderId}/shippingDetails` to the end of this URL. URLs passed to Vipps should be URL-encoded, and must validate with the Apache Commons [UrlValidator](https://commons.apache.org/proper/commons-validator/apidocs/org/apache/commons/validator/routines/UrlValidator.html).",
        "responses": {
          "405": {
            "description": "Request method not supported"
          },
          "500": {
            "description": "Something went wrong from Vipps Server side"
          },
          "402": {
            "description": "Payment Failed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "400": {
            "description": "Bad request (Missing a required parameter or bad request format)"
          },
          "403": {
            "description": "Request Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/FetchShippingCostResponse"
            },
            "description": "Fetch Shipping Cost & Method."
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "operationId": "fetchShippingCostUsingPOST",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "type": "string",
            "description": "orderId",
            "in": "path"
          },
          {
            "schema": {
              "$ref": "#/definitions/FetchShippingCostAndMethod"
            },
            "required": true,
            "name": "fetchShippingCostAndMethod",
            "description": "fetchShippingCostAndMethod",
            "in": "body"
          }
        ],
        "tags": [
          "Endpoints required by Vipps from the merchant"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ]
      }
    },
    "/ecomm/v2/payments/{orderId}/refund": {
      "post": {
        "summary": "Refund Payment ",
        "description": "The API allows a merchant to do a refund of already captured transaction. There is an option to do a partial refund of the captured amount. Refunded amount cannot be larger than captured. Timeframe for issuing a refund for a payment is 365 days from the date payment has been captured. If the refund payment service call is called after the refund timeframe, service call will respond with an error. Refunded funds will be transferred from the merchant account to the customer credit card that was used in payment flow. Pay attention that in order to perform refund, there must be enough funds at merchant settlements account.",
        "responses": {
          "405": {
            "description": "Request method not supported"
          },
          "500": {
            "description": "Something went wrong from Vipps Server side"
          },
          "402": {
            "description": "Payment Failed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "400": {
            "description": "Bad request (Missing a required parameter or bad request format)"
          },
          "403": {
            "description": "Request Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/TransactionResponseRefund"
            },
            "description": "Refund payment response"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "operationId": "refundPaymentUsingPOST",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "type": "string",
            "description": "Order id specified in the request body of initiate payment.",
            "in": "path"
          },
          {
            "name": "authorization",
            "required": true,
            "type": "string",
            "description": "Authorization-token is obtained by running the /accesstoken/get request.",
            "in": "header"
          },
          {
            "name": "content-type",
            "required": true,
            "type": "string",
            "description": "`application/json`",
            "in": "header"
          },
          {
            "name": "ocp-apim-subscription-key",
            "required": true,
            "type": "string",
            "description": "The subscription-key for your product is located in the [developer portal](https://apitest-portal.vipps.no/). Click the username to the right on the page and select ```Profile``` from the dropdown. Find the relevant salesunit and copy the primary key.  See the [getting started guide](https://github.com/vippsas/vipps-developers/blob/master/vipps-developer-portal-getting-started.md) for full guide with images.",
            "in": "header"
          },
          {
            "schema": {
              "$ref": "#/definitions/PaymentActionsRequest"
            },
            "required": true,
            "name": "paymentActionsRequest",
            "description": "paymentActionsRequest",
            "in": "body"
          }
        ],
        "tags": [
          "Vipps eCom API"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ]
      }
    },
    "/ecomm/v2/payments/{orderId}/status": {
      "get": {
        "summary": "Get order status",
        "description": "This API call allows the merchant to get the status of the last payment transaction. Primarily use of this service is meant for inApp where simple response to check order status is preferred.",
        "responses": {
          "405": {
            "description": "Request method not supported"
          },
          "500": {
            "description": "Something went wrong from Vipps Server side"
          },
          "402": {
            "description": "Payment Failed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "400": {
            "description": "Bad request (Missing a required parameter or bad request format)"
          },
          "403": {
            "description": "Request Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/GetPaymentStatusResponse"
            },
            "description": "Get order status"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "consumes": [
          "application/json"
        ],
        "operationId": "getOrderStatusUsingGET",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "type": "string",
            "description": "Order id specified in the request body of initiate payment.",
            "in": "path"
          },
          {
            "name": "authorization",
            "required": true,
            "type": "string",
            "description": "Authorization-token is obtained by running the /accesstoken/get request.",
            "in": "header"
          },
          {
            "name": "ocp-apim-subscription-key",
            "required": true,
            "type": "string",
            "description": "The subscription-key for your product is located in the [developer portal](https://apitest-portal.vipps.no/). Click the username to the right on the page and select ```Profile``` from the dropdown. Find the relevant salesunit and copy the primary key.  See the [getting started guide](https://github.com/vippsas/vipps-developers/blob/master/vipps-developer-portal-getting-started.md) for full guide with images.",
            "in": "header"
          }
        ],
        "tags": [
          "Vipps eCom API"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ]
      }
    },
    "/ecomm/v2/payments/{orderId}/cancel": {
      "put": {
        "summary": "Cancel Payment",
        "description": "The API call allows merchant to cancel the reserved transaction, The API will not allow partial cancellation which has the consequence that partially captured transactions cannot be cancelled. Please note that in a case of communication errors during initiate payment service call between Vipps and PSP/Acquirer/Issuer; even in a case that customer has confirmed a payment, the payment will be cancelled by Vipps. Note this means you can not cancel a captured payment.",
        "responses": {
          "405": {
            "description": "Request method not supported"
          },
          "500": {
            "description": "Something went wrong from Vipps Server side"
          },
          "402": {
            "description": "Payment Failed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "400": {
            "description": "Bad request (Missing a required parameter or bad request format)"
          },
          "403": {
            "description": "Request Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/TransactionResponseCancel"
            },
            "description": "Cancel payment response"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "operationId": "cancelPaymentRequestUsingPUT",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "type": "string",
            "description": "Order id specified in the request body of initiate payment.",
            "in": "path"
          },
          {
            "name": "authorization",
            "required": true,
            "type": "string",
            "description": "Authorization-token is obtained by running the /accesstoken/get request.",
            "in": "header"
          },
          {
            "name": "content-type",
            "required": true,
            "type": "string",
            "description": "`application/json`",
            "in": "header"
          },
          {
            "name": "ocp-apim-subscription-key",
            "required": true,
            "type": "string",
            "description": "The subscription-key for your product is located in the [developer portal](https://apitest-portal.vipps.no/). Click the username to the right on the page and select ```Profile``` from the dropdown. Find the relevant salesunit and copy the primary key.  See the [getting started guide](https://github.com/vippsas/vipps-developers/blob/master/vipps-developer-portal-getting-started.md) for full guide with images.",
            "in": "header"
          },
          {
            "schema": {
              "$ref": "#/definitions/CancelPaymentActionRequest"
            },
            "required": true,
            "name": "paymentActionsRequest",
            "description": "paymentActionsRequest",
            "in": "body"
          }
        ],
        "tags": [
          "Vipps eCom API"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ]
      }
    },
    "/ecomm/v2/payments": {
      "post": {
        "summary": "Initiate Payment",
        "description": "This API call allows the merchants to initiate a payment flow by using Vipps. In order to identify which sales channel payments are coming from, a merchantSerialNumber is used to distinguish between them. Please note that a single payment is uniquely identified by a composite of merchantApplicationId (X-App-ID), merchantSerialNumber and orderId. The Merchant provided orderId must be unique per sales channel. Once the transaction is successfully initiated in Vipps, will you receive a redirect URL in response which has to be used by the merchant to open the Vipps landing page. The landing page will have functionality to identify and differentiate request coming from mobile browser/desktop browser. URLs passed to Vipps should be URL-encoded, and must validate with the Apache Commons [UrlValidator](https://commons.apache.org/proper/commons-validator/apidocs/org/apache/commons/validator/routines/UrlValidator.html).",
        "responses": {
          "405": {
            "description": "Request method not supported"
          },
          "500": {
            "description": "Something went wrong from Vipps Server side"
          },
          "402": {
            "description": "Payment Failed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "400": {
            "description": "Bad request (Missing a required parameter or bad request format)"
          },
          "202": {
            "schema": {
              "$ref": "#/definitions/InitiatePaymentV2Representation"
            },
            "description": "Response for Initiate Payment"
          },
          "403": {
            "description": "Request Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "operationId": "initiatePaymentV3UsingPOST",
        "parameters": [
          {
            "name": "authorization",
            "required": true,
            "type": "string",
            "description": "Authorization-token is obtained by running the /accesstoken/get request.",
            "in": "header"
          },
          {
            "name": "content-type",
            "required": true,
            "type": "string",
            "description": "application/json",
            "in": "header"
          },
          {
            "name": "ocp-apim-subscription-key",
            "required": true,
            "type": "string",
            "description": "The subscription-key for your product is located in the [developer portal](https://apitest-portal.vipps.no/). Click the username to the right on the page and select ```Profile``` from the dropdown. Find the relevant salesunit and copy the primary key.  See the [getting started guide](https://github.com/vippsas/vipps-developers/blob/master/vipps-developer-portal-getting-started.md) for full guide with images.",
            "in": "header"
          },
          {
            "schema": {
              "$ref": "#/definitions/InitiatePaymentCommand"
            },
            "required": true,
            "name": "initiatePaymentCommand",
            "description": "initiatePaymentCommand",
            "in": "body"
          }
        ],
        "tags": [
          "Vipps eCom API"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ]
      }
    },
    "/ecomm/v2/payments/{orderId}/details": {
      "get": {
        "summary": "Get payment Details",
        "description": "This API call allows merchant to get the details of a payment transaction. Service call returns detailed transaction history of given payment where events are sorted by the time single transaction occurred.",
        "responses": {
          "405": {
            "description": "Request method not supported"
          },
          "500": {
            "description": "Something went wrong from Vipps Server side"
          },
          "402": {
            "description": "Payment Failed"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "400": {
            "description": "Bad request (Missing a required parameter or bad request format)"
          },
          "403": {
            "description": "Request Forbidden"
          },
          "404": {
            "description": "Resource Not Found"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/GetTransactionDetails"
            },
            "description": "Get payment Details"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "consumes": [
          "application/json"
        ],
        "operationId": "getPaymentDetailsUsingGET",
        "parameters": [
          {
            "name": "orderId",
            "required": true,
            "type": "string",
            "description": "Order id specified in the request body of initiate payment.",
            "in": "path"
          },
          {
            "name": "authorization",
            "required": true,
            "type": "string",
            "description": "Authorization-token is obtained by running the `/accesstoken/get` request.",
            "in": "header"
          },
          {
            "name": "content-type",
            "required": true,
            "type": "string",
            "description": "`application/json`",
            "in": "header"
          },
          {
            "name": "ocp-apim-subscription-key",
            "required": true,
            "type": "string",
            "description": "The subscription-key for your product is located in the [developer portal](https://apitest-portal.vipps.no/). Click the username to the right on the page and select ```Profile``` from the dropdown. Find the relevant salesunit and copy the primary key.  See the [getting started guide](https://github.com/vippsas/vipps-developers/blob/master/vipps-developer-portal-getting-started.md) for full guide with images.",
            "in": "header"
          }
        ],
        "tags": [
          "Vipps eCom API"
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ]
      }
    }
  },
  "swagger": "2.0",
  "tags": [
    {
      "name": "Authorization Service",
      "description": "Authorization Service"
    },
    {
      "name": "Vipps eCom API",
      "description": "Functionality provided by the Vipps eCommerce API"
    },
    {
      "name": "Endpoints required by Vipps from the merchant",
      "description": "These endpoints must be implemented by the merchant, and are called by Vipps."
    }
  ]
}