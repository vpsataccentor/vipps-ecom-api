{
  "host": "apitest.vipps.no",
  "swagger": "2.0",
  "tags": [
    {
      "name": "Authorization Service",
      "description": "Authorization Service"
    },
    {
      "name": "Vipps eCom API",
      "description": "Functionality provided by the Vipps eCommerce API"
    },
    {
      "name": "Endpoints required by Vipps from the merchant",
      "description": "These endpoints must be implemented by the merchant, and are called by Vipps."
    }
  ],
  "paths": {
    "[consentRemovalPrefix]/v2/consents/{userId}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "description": "This API endpoint on the merchant side allows Vipps to send consent removal requests to the merchant. When receiving requests the merchant is obliged to remove the user details permanently, as per the GDPR guidelines. Vipps will add `/v2/consents/{userId}` to the end of this URL. URLs passed to Vipps should be URL-encoded, and must validate with the Apache Commons [UrlValidator](https://commons.apache.org/proper/commons-validator/apidocs/org/apache/commons/validator/routines/UrlValidator.html).",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "description": "The userId provided when requesting user information from Vipps. Received by callback or get detail request.",
            "type": "string",
            "required": true
          }
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "summary": "Remove User Consent (for express checkout)",
        "operationId": "removeUserConsentUsingDELETE",
        "tags": [
          "Endpoints required by Vipps from the merchant"
        ],
        "responses": {
          "404": {
            "description": "Resource Not Found"
          },
          "500": {
            "description": "Something went wrong from Vipps Server side"
          },
          "400": {
            "description": "Bad request (Missing a required parameter or bad request format)"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "200": {
            "description": "Remove User Consent (for express checkout)"
          },
          "405": {
            "description": "Request method not supported"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Request Forbidden"
          }
        }
      }
    },
    "/ecomm/v2/payments/{orderId}/details": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "This API call allows merchant to get the details of a payment transaction. Service call returns detailed transaction history of given payment where events are sorted by the time single transaction occurred.",
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "description": "Order id specified in the request body of initiate payment.",
            "type": "string",
            "required": true
          },
          {
            "in": "header",
            "name": "authorization",
            "description": "Authorization-token is obtained by running the `/accesstoken/get` request.",
            "type": "string",
            "required": true
          },
          {
            "in": "header",
            "name": "content-type",
            "description": "`application/json`",
            "type": "string",
            "required": true
          },
          {
            "in": "header",
            "name": "ocp-apim-subscription-key",
            "description": "The subscription-key for your product is located in the [developer portal](https://apitest-portal.vipps.no/). Click the username to the right on the page and select ```Profile``` from the dropdown. Find the relevant salesunit and copy the primary key.  See the [getting started guide](https://github.com/vippsas/vipps-developers/blob/master/vipps-developer-portal-getting-started.md) for full guide with images.",
            "type": "string",
            "required": true
          }
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "summary": "Get payment Details",
        "operationId": "getPaymentDetailsUsingGET",
        "tags": [
          "Vipps eCom API"
        ],
        "responses": {
          "404": {
            "description": "Resource Not Found"
          },
          "500": {
            "description": "Something went wrong from Vipps Server side"
          },
          "400": {
            "description": "Bad request (Missing a required parameter or bad request format)"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/GetTransactionDetails"
            },
            "description": "Get payment Details"
          },
          "405": {
            "description": "Request method not supported"
          },
          "402": {
            "description": "Payment Failed"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Request Forbidden"
          }
        }
      }
    },
    "/ecomm/v2/payments/{orderId}/refund": {
      "post": {
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "description": "The API allows a merchant to do a refund of already captured transaction. There is an option to do a partial refund of the captured amount. Refunded amount cannot be larger than captured. Timeframe for issuing a refund for a payment is 365 days from the date payment has been captured. If the refund payment service call is called after the refund timeframe, service call will respond with an error. Refunded funds will be transferred from the merchant account to the customer credit card that was used in payment flow. Pay attention that in order to perform refund, there must be enough funds at merchant settlements account.",
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "description": "Order id specified in the request body of initiate payment.",
            "type": "string",
            "required": true
          },
          {
            "in": "header",
            "name": "authorization",
            "description": "Authorization-token is obtained by running the /accesstoken/get request.",
            "type": "string",
            "required": true
          },
          {
            "in": "header",
            "name": "content-type",
            "description": "`application/json`",
            "type": "string",
            "required": true
          },
          {
            "in": "header",
            "name": "ocp-apim-subscription-key",
            "description": "The subscription-key for your product is located in the [developer portal](https://apitest-portal.vipps.no/). Click the username to the right on the page and select ```Profile``` from the dropdown. Find the relevant salesunit and copy the primary key.  See the [getting started guide](https://github.com/vippsas/vipps-developers/blob/master/vipps-developer-portal-getting-started.md) for full guide with images.",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "paymentActionsRequest",
            "description": "paymentActionsRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentActionsRequest"
            }
          }
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "summary": "Refund Payment ",
        "operationId": "refundPaymentUsingPOST",
        "tags": [
          "Vipps eCom API"
        ],
        "responses": {
          "404": {
            "description": "Resource Not Found"
          },
          "500": {
            "description": "Something went wrong from Vipps Server side"
          },
          "400": {
            "description": "Bad request (Missing a required parameter or bad request format)"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/TransactionResponseRefund"
            },
            "description": "Refund payment response"
          },
          "405": {
            "description": "Request method not supported"
          },
          "402": {
            "description": "Payment Failed"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Request Forbidden"
          }
        }
      }
    },
    "/ecomm/v2/payments/{orderId}/cancel": {
      "put": {
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "description": "The API call allows merchant to cancel the reserved transaction, The API will not allow partial cancellation which has the consequence that partially captured transactions cannot be cancelled. Please note that in a case of communication errors during initiate payment service call between Vipps and PSP/Acquirer/Issuer; even in a case that customer has confirmed a payment, the payment will be cancelled by Vipps. Note this means you can not cancel a captured payment.",
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "description": "Order id specified in the request body of initiate payment.",
            "type": "string",
            "required": true
          },
          {
            "in": "header",
            "name": "authorization",
            "description": "Authorization-token is obtained by running the /accesstoken/get request.",
            "type": "string",
            "required": true
          },
          {
            "in": "header",
            "name": "content-type",
            "description": "`application/json`",
            "type": "string",
            "required": true
          },
          {
            "in": "header",
            "name": "ocp-apim-subscription-key",
            "description": "The subscription-key for your product is located in the [developer portal](https://apitest-portal.vipps.no/). Click the username to the right on the page and select ```Profile``` from the dropdown. Find the relevant salesunit and copy the primary key.  See the [getting started guide](https://github.com/vippsas/vipps-developers/blob/master/vipps-developer-portal-getting-started.md) for full guide with images.",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "paymentActionsRequest",
            "description": "paymentActionsRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CancelPaymentActionRequest"
            }
          }
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "summary": "Cancel Payment",
        "operationId": "cancelPaymentRequestUsingPUT",
        "tags": [
          "Vipps eCom API"
        ],
        "responses": {
          "404": {
            "description": "Resource Not Found"
          },
          "500": {
            "description": "Something went wrong from Vipps Server side"
          },
          "400": {
            "description": "Bad request (Missing a required parameter or bad request format)"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/TransactionResponseCancel"
            },
            "description": "Cancel payment response"
          },
          "405": {
            "description": "Request method not supported"
          },
          "402": {
            "description": "Payment Failed"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Request Forbidden"
          }
        }
      }
    },
    "[shippingDetailsPrefix]/v2/payments/{orderId}/shippingDetails": {
      "post": {
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "description": "This API endpoint on the merchant side allows Vipps to get the shipping cost and method based on the provided address and product details. The primary use of this service is Vipps Hurtigkasse (express checkout) where Vipps needs to present shipping cost and method to the Vipps user. Vipps will add `/v2/payments/{orderId}/shippingDetails` to the end of this URL. URLs passed to Vipps should be URL-encoded, and must validate with the Apache Commons [UrlValidator](https://commons.apache.org/proper/commons-validator/apidocs/org/apache/commons/validator/routines/UrlValidator.html).",
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "description": "orderId",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "fetchShippingCostAndMethod",
            "description": "fetchShippingCostAndMethod",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FetchShippingCostAndMethod"
            }
          }
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "summary": "Fetch Shipping Cost & Method",
        "operationId": "fetchShippingCostUsingPOST",
        "tags": [
          "Endpoints required by Vipps from the merchant"
        ],
        "responses": {
          "404": {
            "description": "Resource Not Found"
          },
          "500": {
            "description": "Something went wrong from Vipps Server side"
          },
          "400": {
            "description": "Bad request (Missing a required parameter or bad request format)"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/FetchShippingCostResponse"
            },
            "description": "Fetch Shipping Cost & Method."
          },
          "405": {
            "description": "Request method not supported"
          },
          "402": {
            "description": "Payment Failed"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Request Forbidden"
          }
        }
      }
    },
    "/accesstoken/get": {
      "post": {
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "description": "Authorization token API endpoint helps to get the JWT Bearer token that needs to be passed in every API request in the authorization header. The merchant application use the API to get a JWT access token. JWT access token is a base 64 encoded string value that must be aquire first before making any Vipps api calls",
        "parameters": [
          {
            "format": "guid",
            "name": "client_id",
            "description": "Client id is located in the [developer portal](https://apitest-portal.vipps.no/). Navigate to the ```Applications``` tab and click the ```View secrets``` button to display the client id. See the [getting started guide](https://github.com/vippsas/vipps-developers/blob/master/vipps-developer-portal-getting-started.md) for full guide with images.",
            "in": "header",
            "required": true,
            "type": "string"
          },
          {
            "in": "header",
            "name": "client_secret",
            "description": "Client secret is located in the [developer portal](https://apitest-portal.vipps.no/). Navigate to the ```Applications``` tab and click the ```View secrets``` button to display the client id. See the [getting started guide](https://github.com/vippsas/vipps-developers/blob/master/vipps-developer-portal-getting-started.md) for full guide with images.",
            "type": "string",
            "required": true
          },
          {
            "in": "header",
            "name": "ocp-apim-subscription-key",
            "description": "The subscription-key for authorization token is located in the [developer portal](https://apitest-portal.vipps.no/). Click the username to the right on the page and select ```Profile``` from the dropdown. The ```DEFAULT_ACCESSTOKEN``` key is the value for subscription-key. See the [getting started guide](https://github.com/vippsas/vipps-developers/blob/master/vipps-developer-portal-getting-started.md) for full guide with images.",
            "type": "string",
            "required": true
          }
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "summary": "Fetch authorization token",
        "operationId": "fetchAuthorizationTokenUsingPost",
        "tags": [
          "Authorization Service"
        ],
        "responses": {
          "404": {
            "description": "Resource Not Found"
          },
          "500": {
            "description": "Something went wrong from Vipps Server side"
          },
          "400": {
            "description": "Bad request (Missing a required parameter or bad request format)"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/AuthorizationTokenResponse"
            },
            "description": "OK"
          },
          "405": {
            "description": "Request method not supported"
          },
          "402": {
            "description": "Payment Failed"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Request Forbidden"
          }
        }
      }
    },
    "/ecomm/v2/payments": {
      "post": {
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "description": "This API call allows the merchants to initiate a payment flow by using Vipps. In order to identify which sales channel payments are coming from, a merchantSerialNumber is used to distinguish between them. Please note that a single payment is uniquely identified by a composite of merchantApplicationId (X-App-ID), merchantSerialNumber and orderId. The Merchant provided orderId must be unique per sales channel. Once the transaction is successfully initiated in Vipps, will you receive a redirect URL in response which has to be used by the merchant to open the Vipps landing page. The landing page will have functionality to identify and differentiate request coming from mobile browser/desktop browser. URLs passed to Vipps should be URL-encoded, and must validate with the Apache Commons [UrlValidator](https://commons.apache.org/proper/commons-validator/apidocs/org/apache/commons/validator/routines/UrlValidator.html).",
        "parameters": [
          {
            "in": "header",
            "name": "authorization",
            "description": "Authorization-token is obtained by running the /accesstoken/get request.",
            "type": "string",
            "required": true
          },
          {
            "in": "header",
            "name": "content-type",
            "description": "application/json",
            "type": "string",
            "required": true
          },
          {
            "in": "header",
            "name": "ocp-apim-subscription-key",
            "description": "The subscription-key for your product is located in the [developer portal](https://apitest-portal.vipps.no/). Click the username to the right on the page and select ```Profile``` from the dropdown. Find the relevant salesunit and copy the primary key.  See the [getting started guide](https://github.com/vippsas/vipps-developers/blob/master/vipps-developer-portal-getting-started.md) for full guide with images.",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "initiatePaymentCommand",
            "description": "initiatePaymentCommand",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InitiatePaymentCommand"
            }
          }
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "summary": "Initiate Payment",
        "operationId": "initiatePaymentV3UsingPOST",
        "tags": [
          "Vipps eCom API"
        ],
        "responses": {
          "404": {
            "description": "Resource Not Found"
          },
          "500": {
            "description": "Something went wrong from Vipps Server side"
          },
          "400": {
            "description": "Bad request (Missing a required parameter or bad request format)"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "202": {
            "schema": {
              "$ref": "#/definitions/InitiatePaymentV2Representation"
            },
            "description": "Response for Initiate Payment"
          },
          "405": {
            "description": "Request method not supported"
          },
          "402": {
            "description": "Payment Failed"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Request Forbidden"
          }
        }
      }
    },
    "/ecomm/v2/payments/{orderId}/status": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "This API call allows the merchant to get the status of the last payment transaction. Primarily use of this service is meant for inApp where simple response to check order status is preferred.",
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "description": "Order id specified in the request body of initiate payment.",
            "type": "string",
            "required": true
          },
          {
            "in": "header",
            "name": "authorization",
            "description": "Authorization-token is obtained by running the /accesstoken/get request.",
            "type": "string",
            "required": true
          },
          {
            "in": "header",
            "name": "ocp-apim-subscription-key",
            "description": "The subscription-key for your product is located in the [developer portal](https://apitest-portal.vipps.no/). Click the username to the right on the page and select ```Profile``` from the dropdown. Find the relevant salesunit and copy the primary key.  See the [getting started guide](https://github.com/vippsas/vipps-developers/blob/master/vipps-developer-portal-getting-started.md) for full guide with images.",
            "type": "string",
            "required": true
          }
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "summary": "Get order status",
        "operationId": "getOrderStatusUsingGET",
        "tags": [
          "Vipps eCom API"
        ],
        "responses": {
          "404": {
            "description": "Resource Not Found"
          },
          "500": {
            "description": "Something went wrong from Vipps Server side"
          },
          "400": {
            "description": "Bad request (Missing a required parameter or bad request format)"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/GetPaymentStatusResponse"
            },
            "description": "Get order status"
          },
          "405": {
            "description": "Request method not supported"
          },
          "402": {
            "description": "Payment Failed"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Request Forbidden"
          }
        }
      }
    },
    "/ecomm/v2/payments/{orderId}/capture": {
      "post": {
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "description": "This API call allows merchant to capture the reserved amount. Amount to capture cannot be higher than reserved. The API also allows capturing partial amount of the reserved amount. Partial capture can be called as many times as required so long there is reserved amount to capture. Transaction text is not optional and is used as a proof of delivery (tracking code, consignment number etc.). In a case of direct capture, both fund reservation and capture are executed in a single operation.",
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "description": "Order id specified in the request body of initiate payment.",
            "type": "string",
            "required": true
          },
          {
            "in": "header",
            "name": "authorization",
            "description": "Authorization-token is obtained by running the /accesstoken/get request.",
            "type": "string",
            "required": true
          },
          {
            "in": "header",
            "name": "content-type",
            "description": "`application/json`",
            "type": "string",
            "required": true
          },
          {
            "in": "header",
            "name": "ocp-apim-subscription-key",
            "description": "The subscription-key for your product is located in the [developer portal](https://apitest-portal.vipps.no/). Click the username to the right on the page and select ```Profile``` from the dropdown. Find the relevant salesunit and copy the primary key.  See the [getting started guide](https://github.com/vippsas/vipps-developers/blob/master/vipps-developer-portal-getting-started.md) for full guide with images.",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "paymentActionsRequest",
            "description": "paymentActionsRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentActionsRequest"
            }
          }
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "summary": "Capture Payment ",
        "operationId": "capturePaymentUsingPOST",
        "tags": [
          "Vipps eCom API"
        ],
        "responses": {
          "404": {
            "description": "Resource Not Found"
          },
          "500": {
            "description": "Something went wrong from Vipps Server side"
          },
          "400": {
            "description": "Bad request (Missing a required parameter or bad request format)"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "200": {
            "schema": {
              "$ref": "#/definitions/TransactionResponseCapture"
            },
            "description": "Capture payment response"
          },
          "405": {
            "description": "Request method not supported"
          },
          "402": {
            "description": "Payment Failed"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Request Forbidden"
          }
        }
      }
    },
    "[callbackPrefix]/v2/payments/{orderId}": {
      "post": {
        "consumes": [
          "application/json;charset=UTF-8"
        ],
        "description": "This API call allows Vipps to send the transaction details. During regular ecomm payment order and transaction details will be shared. During express checkout payment it will provide user details and shipping details addition to the order and transaction details. Vipps will add `/v2/payments/{orderId}` to the end of this URL. URLs passed to Vipps should be URL-encoded, and must validate with the Apache Commons [UrlValidator](https://commons.apache.org/proper/commons-validator/apidocs/org/apache/commons/validator/routines/UrlValidator.html).",
        "parameters": [
          {
            "in": "path",
            "name": "orderId",
            "description": "orderId",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "expressCheckOutPaymentRequest",
            "description": "expressCheckOutPaymentRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExpressCheckOutPaymentRequest"
            }
          }
        ],
        "produces": [
          "application/json;charset=UTF-8"
        ],
        "summary": "Callback : Transaction Update",
        "operationId": "transactionUpdateCallbackForRegularPaymentUsingPOST",
        "tags": [
          "Endpoints required by Vipps from the merchant"
        ],
        "responses": {
          "404": {
            "description": "Resource Not Found"
          },
          "500": {
            "description": "Something went wrong on the Vipps server side"
          },
          "400": {
            "description": "Bad request (Missing a required parameter or bad request format)"
          },
          "415": {
            "description": "Unsupported media type"
          },
          "200": {
            "description": "Callback : Transaction Update"
          },
          "405": {
            "description": "Request method not supported"
          },
          "402": {
            "description": "Payment Failed"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Request Forbidden"
          }
        }
      }
    }
  },
  "info": {
    "version": "1.0.4",
    "title": "Vipps eCommerce APIs",
    "description": "# Vipps eCommerce API\nAdditional API documentation: https://github.com/vippsas/vipps-ecom-api/\n"
  },
  "definitions": {
    "TransactionInfoCancel": {
      "properties": {
        "amount": {
          "format": "double",
          "type": "number",
          "description": "Ordered amount in øre",
          "example": 20000
        },
        "status": {
          "enum": [
            "Cancelled"
          ],
          "type": "string",
          "description": "Status which gives the current state of the payment within Vipps. See the [API guide](https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#responses-from-requests) for more information.",
          "example": "Cancelled"
        },
        "transactionId": {
          "type": "string",
          "description": "Vipps transaction id",
          "example": "5001420062"
        },
        "timeStamp": {
          "type": "string",
          "description": "Timestamp in ISO-8601 representing when vipps Cancelled transaction.",
          "example": "2018-12-12T11:18:38.246Z"
        },
        "transactionText": {
          "type": "string",
          "description": "Transaction text reference provided by merchant",
          "example": "One pair of Vipps socks"
        }
      },
      "type": "object",
      "required": [
        "amount",
        "status",
        "timeStamp",
        "transactionId",
        "transactionText"
      ]
    },
    "CancelPaymentActionRequest": {
      "properties": {
        "merchantInfo": {
          "$ref": "#/definitions/MerchantInfoPayment"
        },
        "transaction": {
          "$ref": "#/definitions/CancelTransaction"
        }
      },
      "type": "object"
    },
    "ShippingDetailsRequest": {
      "properties": {
        "shippingMethod": {
          "type": "string",
          "description": "Shipping method which choosed for the payment"
        },
        "address": {
          "description": "Address Details",
          "$ref": "#/definitions/Address"
        },
        "shippingCost": {
          "format": "double",
          "type": "number",
          "description": "Shipping cost"
        }
      },
      "type": "object",
      "required": [
        "address",
        "shippingCost",
        "shippingMethod"
      ]
    },
    "TransactionResponseRefund": {
      "properties": {
        "transaction": {
          "$ref": "#/definitions/TransactionInfoRefund"
        },
        "orderId": {
          "type": "string",
          "description": "Id which uniquely identifies a payment. Maximum length is 30 alphanumeric characters",
          "example": "order123abc",
          "maxLength": 30
        },
        "transactionSummary": {
          "$ref": "#/definitions/TransactionSummary"
        }
      },
      "type": "object",
      "required": [
        "orderId"
      ]
    },
    "TransactionLogHistory": {
      "properties": {
        "amount": {
          "format": "int32",
          "type": "integer"
        },
        "transactionText": {
          "type": "string"
        },
        "timeStamp": {
          "type": "string"
        },
        "operationSuccess": {
          "type": "boolean"
        },
        "operation": {
          "enum": [
            "INITIATE",
            "RESERVE",
            "SALE",
            "CAPTURE",
            "REFUND",
            "CANCEL",
            "VOID"
          ],
          "type": "string",
          "description": "The operation that was performed for this log entry. See the [API guide](https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#responses-from-requests) for more information.",
          "example": "RESERVE"
        },
        "requestId": {
          "type": "string"
        },
        "transactionId": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserDetails": {
      "properties": {
        "ssn": {
          "type": "string",
          "description": "12345678912",
          "maxLength": 11,
          "pattern": "^\\d{11}$",
          "minLength": 11
        },
        "userId": {
          "type": "string",
          "description": "1234567",
          "example": "1234567"
        },
        "lastName": {
          "type": "string",
          "description": "Last name",
          "example": "Lovelace"
        },
        "mobileNumber": {
          "type": "string",
          "description": "12345678",
          "maxLength": 12,
          "pattern": "^\\d{8,12}$",
          "minLength": 8
        },
        "bankIdVerified": {
          "type": "string"
        },
        "firstName": {
          "type": "string",
          "description": "First name",
          "example": "Ada"
        },
        "dateOfBirth": {
          "type": "string",
          "description": "12-3-1988",
          "example": "12-3-1988"
        },
        "email": {
          "type": "string",
          "description": "Email address",
          "example": "user@example.com"
        }
      },
      "type": "object",
      "required": [
        "email",
        "firstName",
        "lastName",
        "mobileNumber",
        "userId"
      ]
    },
    "MerchantInfoDto": {
      "properties": {
        "authToken": {
          "type": "string",
          "description": "The Merchant should share this token if merchant has authentication mechanism in place which could be used for making callbacks secure.",
          "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1Ni <snip>",
          "maxLength": 255
        },
        "isApp": {
          "default": false,
          "type": "boolean",
          "description": "This parameter indicates whether payment request is triggered from Mobile App or Web browser. Based on this value, response will be redirect URL for Vipps landing page or deeplink URL to connect vipps App. When isApp is set to true, URLs passed to Vipps will not be validated as regular URLs.",
          "example": false
        },
        "consentRemovalPrefix": {
          "type": "string",
          "description": "Required for expess checkout payments. This callback URL will be used by Vipps to inform the merchant that the user has revoked his/her consent: This Vipps user does do not want the merchant to store or use his/her personal information anymore. Required by GDPR. Vipps will add `/v2/consents/{userId}` to the end or this URL. URLs passed to Vipps should be URL-encoded, and must validate with the Apache Commons [UrlValidator](https://commons.apache.org/proper/commons-validator/apidocs/org/apache/commons/validator/routines/UrlValidator.html).",
          "example": "https://example.com/vipps",
          "maxLength": 255
        },
        "merchantSerialNumber": {
          "type": "string",
          "description": "Unique id for this merchant's sales channel: website, mobile app etc. Short name: MSN.",
          "maxLength": 6,
          "pattern": "^\\d{6}$",
          "example": 123456,
          "minLength": 6
        },
        "paymentType": {
          "enum": [
            "eComm Regular Payment",
            "eComm Express Payment"
          ],
          "default": "eComm Regular Payment",
          "type": "string",
          "description": "This parameter will identify difference between a regular ecomm payment and ecomm express payment. For express checkout, use: \"eComm Express Payment\". Express checkouts require consentRemovalPrefix.",
          "example": "eComm Regular Payment"
        },
        "fallBack": {
          "type": "string",
          "description": "Vipps will use the fall back URL to redirect Merchant Page once Payment is completed in Vipps System URLs passed to Vipps should be URL-encoded, and must validate with the Apache Commons [UrlValidator](https://commons.apache.org/proper/commons-validator/apidocs/org/apache/commons/validator/routines/UrlValidator.html).",
          "example": "https://example.com/vipps/fallback/order123abc",
          "maxLength": 255
        },
        "callbackPrefix": {
          "type": "string",
          "description": "This is an URL for receiving the callback after the payment request. Domain name and context path should be provided by merchant as the value for this parameter. Vipps will add `/v2/payments/{orderId}` to the end or this URL. URLs passed to Vipps should be URL-encoded, and must validate with the Apache Commons [UrlValidator](https://commons.apache.org/proper/commons-validator/apidocs/org/apache/commons/validator/routines/UrlValidator.html).",
          "example": "https://example.com/vipps/callbacks",
          "maxLength": 255
        },
        "shippingDetailsPrefix": {
          "type": "string",
          "description": "In case of express checkout payment, merchant should pass this prefix to let Vipps fetch shipping cost and method related details. Vipps will add `/v2/payments/{orderId}/shippingDetails` to the end or this URL.",
          "example": "https://example.com/vipps/shipping/",
          "maxLength": 255
        }
      },
      "type": "object",
      "required": [
        "callbackPrefix",
        "fallBack",
        "merchantSerialNumber"
      ]
    },
    "ShippingDetails": {
      "properties": {
        "shippingMethod": {
          "type": "string"
        },
        "priority": {
          "format": "int32",
          "type": "integer"
        },
        "shippingCost": {
          "format": "double",
          "type": "number"
        },
        "isDefault": {
          "enum": [
            "Y",
            "N"
          ],
          "type": "string"
        },
        "shippingMethodId": {
          "type": "string"
        }
      },
      "type": "object",
      "required": [
        "isDefault",
        "shippingCost",
        "shippingMethod",
        "shippingMethodId"
      ]
    },
    "CancelTransaction": {
      "properties": {
        "transactionText": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PaymentActionsRequest": {
      "properties": {
        "merchantInfo": {
          "$ref": "#/definitions/MerchantInfoPayment"
        },
        "transaction": {
          "$ref": "#/definitions/Transaction"
        }
      },
      "type": "object"
    },
    "TransactionResponseCancel": {
      "properties": {
        "orderId": {
          "type": "string",
          "description": "Id which uniquely identifies a payment. Maximum length is 30 alphanumeric characters",
          "example": "order123abc",
          "maxLength": 30
        },
        "transactionSummary": {
          "$ref": "#/definitions/TransactionSummary"
        },
        "transactionInfo": {
          "$ref": "#/definitions/TransactionInfoCancel"
        }
      },
      "type": "object",
      "required": [
        "orderId"
      ]
    },
    "MerchantInfoPayment": {
      "properties": {
        "merchantSerialNumber": {
          "type": "string",
          "description": "Unique id for this merchant's sales channel: website, mobile app etc. Short name: MSN.",
          "maxLength": 6,
          "pattern": "^\\d{6}$",
          "example": 123456,
          "minLength": 6
        }
      },
      "type": "object",
      "required": [
        "merchantSerialNumber"
      ]
    },
    "FetchShippingCostResponse": {
      "properties": {
        "addressId": {
          "format": "int32",
          "type": "integer"
        },
        "orderId": {
          "type": "string",
          "example": "order123abc"
        },
        "shippingDetails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShippingDetails"
          }
        }
      },
      "type": "object",
      "required": [
        "addressId",
        "orderId",
        "shippingDetails"
      ]
    },
    "TransactionInfoRefund": {
      "properties": {
        "amount": {
          "format": "double",
          "type": "number",
          "description": "Ordered amount in øre",
          "example": 20000
        },
        "status": {
          "enum": [
            "Refund"
          ],
          "type": "string",
          "description": "Status which gives the current state of the payment within Vipps. See the [API guide](https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#responses-from-requests) for more information.",
          "example": "Refund"
        },
        "transactionId": {
          "type": "string",
          "description": "Vipps transaction id",
          "example": "5001420062"
        },
        "timeStamp": {
          "type": "string",
          "description": "Timestamp in ISO-8601 representing when vipps Cancelled transaction.",
          "example": "2018-12-12T11:18:38.246Z"
        },
        "transactionText": {
          "type": "string",
          "description": "Transaction text reference provided by merchant",
          "example": "One pair of Vipps socks"
        }
      },
      "type": "object",
      "required": [
        "amount",
        "status",
        "timeStamp",
        "transactionId",
        "transactionText"
      ]
    },
    "ExpressCheckOutPaymentRequest": {
      "properties": {
        "shippingDetails": {
          "description": "Shipping Details will be added in the call back request if the payment is Express Checkout",
          "$ref": "#/definitions/ShippingDetailsRequest"
        },
        "orderId": {
          "type": "string",
          "description": "Id which uniquely identifies a payment. Maximum length is 30 alphanumeric characters",
          "example": "order123abc"
        },
        "merchantSerialNumber": {
          "type": "string",
          "description": "Unique id for this merchant's sales channel: website, mobile app etc. Short name: MSN.",
          "maxLength": 6,
          "pattern": "^\\d{6}$",
          "example": 123456,
          "minLength": 6
        },
        "userDetails": {
          "description": "Vipps User Information",
          "$ref": "#/definitions/UserDetails"
        },
        "transactionInfo": {
          "$ref": "#/definitions/CallbackTransactionInfoStatus"
        }
      },
      "type": "object",
      "required": [
        "merchantSerialNumber",
        "orderId",
        "shippingDetails",
        "userDetails"
      ]
    },
    "GetPaymentStatusResponse": {
      "properties": {
        "orderId": {
          "type": "string",
          "example": "order123abc"
        },
        "transactionInfo": {
          "$ref": "#/definitions/OrderStatusInfoTransactionInfo"
        }
      },
      "type": "object"
    },
    "TransactionResponseCapture": {
      "properties": {
        "orderId": {
          "type": "string",
          "description": "Id which uniquely identifies a payment. Maximum length is 30 alphanumeric characters",
          "example": "order123abc",
          "maxLength": 30
        },
        "transactionSummary": {
          "$ref": "#/definitions/TransactionSummary"
        },
        "transactionInfo": {
          "$ref": "#/definitions/TransactionInfoCapture"
        }
      },
      "type": "object",
      "required": [
        "orderId"
      ]
    },
    "TransactionInfoCapture": {
      "properties": {
        "amount": {
          "format": "double",
          "type": "number",
          "description": "Ordered amount in øre",
          "example": 20000
        },
        "status": {
          "enum": [
            "Captured"
          ],
          "type": "string",
          "description": "Status which gives the current state of the payment within Vipps. See the [API guide](https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#responses-from-requests) for more information.",
          "example": "Captured"
        },
        "transactionId": {
          "type": "string",
          "description": "Vipps transaction id",
          "example": "5001420062"
        },
        "timeStamp": {
          "type": "string",
          "description": "Timestamp in ISO-8601 representing when vipps Cancelled transaction.",
          "example": "2018-12-12T11:18:38.246Z"
        },
        "transactionText": {
          "type": "string",
          "description": "Transaction text reference provided by merchant",
          "example": "One pair of Vipps socks"
        }
      },
      "type": "object",
      "required": [
        "amount",
        "status",
        "timeStamp",
        "transactionId",
        "transactionText"
      ]
    },
    "GetTransactionDetails": {
      "properties": {
        "shippingDetails": {
          "$ref": "#/definitions/PaymentShippingDetails"
        },
        "orderId": {
          "type": "string",
          "example": "order123abc"
        },
        "transactionSummary": {
          "$ref": "#/definitions/TransactionSummary"
        },
        "userDetails": {
          "$ref": "#/definitions/UserDetails"
        },
        "transactionLogHistory": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TransactionLogHistory"
          }
        }
      },
      "type": "object"
    },
    "CallbackTransactionInfoStatus": {
      "properties": {
        "amount": {
          "format": "double",
          "type": "number",
          "description": "Ordered amount in øre",
          "example": 20000
        },
        "status": {
          "enum": [
            "RESERVE",
            "SALE",
            "CANCELLED",
            "REJECTED"
          ],
          "type": "string",
          "description": "Status which gives the current state of the payment within Vipps. See the [API guide](https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#callbacks) for more information.",
          "example": "RESERVE"
        },
        "timeStamp": {
          "type": "string",
          "description": "Timestamp in ISO-8601 representing when Vipps cancelled the transaction.",
          "example": "2018-12-12T11:18:38.246Z"
        },
        "transactionId": {
          "type": "string",
          "description": "Vipps transaction id",
          "example": "5001420062"
        }
      },
      "type": "object",
      "required": [
        "amount",
        "status",
        "timeStamp",
        "transactionId"
      ]
    },
    "AuthorizationTokenResponse": {
      "properties": {
        "expires_on": {
          "type": "integer",
          "example": 1547823408
        },
        "access_token": {
          "type": "string",
          "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1Ni <snip>"
        },
        "expires_in": {
          "type": "integer",
          "example": 3600
        },
        "ext_expires_in": {
          "type": "integer",
          "example": 3600
        },
        "not_before": {
          "type": "integer",
          "example": 1547819508
        },
        "token_type": {
          "type": "string",
          "example": "Bearer"
        },
        "resource": {
          "type": "string",
          "example": "00000002-0000-0000-c000-000000000000"
        }
      },
      "type": "object"
    },
    "Transaction": {
      "properties": {
        "amount": {
          "format": "int32",
          "type": "integer",
          "description": "Amount in øre, if amount is 0 or not provided then full capture will be performed. 32 Bit Integer (2147483647)",
          "example": 20000,
          "pattern": "^\\d{3,}$"
        },
        "transactionText": {
          "type": "string",
          "description": "Proof of delivery"
        }
      },
      "type": "object",
      "required": [
        "transactionText"
      ]
    },
    "TransactionSummary": {
      "properties": {
        "capturedAmount": {
          "format": "int32",
          "type": "integer",
          "description": "Total amount captured",
          "example": 20000
        },
        "remainingAmountToRefund": {
          "format": "int32",
          "type": "integer",
          "description": "Total remaining amount to refund",
          "example": 20000
        },
        "remainingAmountToCapture": {
          "format": "int32",
          "type": "integer",
          "description": "Total remaining amount to capture",
          "example": 0
        },
        "refundedAmount": {
          "format": "int32",
          "type": "integer",
          "description": "Total refunded amount of the order",
          "example": 0
        }
      },
      "type": "object",
      "required": [
        "capturedAmount",
        "refundedAmount",
        "remainingAmountToCapture",
        "remainingAmountToRefund"
      ]
    },
    "TransactionInfoInitiateDTO": {
      "properties": {
        "amount": {
          "format": "int32",
          "type": "integer",
          "description": "Amount in øre. 32 bit Integer (2147483647)",
          "example": 20000,
          "pattern": "^\\d{3,}$"
        },
        "orderId": {
          "type": "string",
          "description": "Id which uniquely identifies a payment. Maximum length is 30 alphanumeric characters.",
          "example": "order123abc",
          "maxLength": 30
        },
        "timeStamp": {
          "format": "date-time",
          "type": "string",
          "description": "ISO formatted date time string.",
          "example": "2018-11-14T15:44:26.590Z"
        },
        "refOrderId": {
          "type": "string",
          "description": "Identifies if the payment references to some past orders registered with Vipps. If defined, transactions for this payment will show up as child transactions of the specified order.",
          "example": "merchantOrder123abc",
          "maxLength": 30
        },
        "transactionText": {
          "type": "string",
          "description": "Transaction text that can be displayed to end user",
          "example": "One pair of Vipps socks",
          "maxLength": 100
        }
      },
      "type": "object",
      "required": [
        "amount",
        "orderId",
        "transactionText"
      ]
    },
    "InitiatePaymentV2Representation": {
      "properties": {
        "orderId": {
          "type": "string",
          "description": "Id which uniquely identifies a payment. Maximum length is 30 alphanumeric characters.",
          "example": "order123abc"
        },
        "url": {
          "type": "string",
          "description": "URL parameter will have URL to redirect the request to vipps gateway page in case request is trigger from web browser or deeplink URL to open vipps app incase request is triggered from Merchant Mobile App.",
          "example": "https://example.com"
        }
      },
      "type": "object",
      "required": [
        "orderId",
        "url"
      ]
    },
    "AuthorizationTokenMethod": {
      "type": "object"
    },
    "Address": {
      "properties": {
        "addressLine2": {
          "type": "string",
          "description": "Address Line 2",
          "example": "Att: Rune Garborg"
        },
        "city": {
          "type": "string",
          "description": "City",
          "example": "Oslo"
        },
        "zipCode": {
          "type": "string",
          "description": "Zip Code",
          "example": "0191"
        },
        "addressLine1": {
          "type": "string",
          "description": "Address Line 1",
          "example": "Dronning Eufemias gate 42"
        },
        "country": {
          "type": "string",
          "description": "Country,default=NO",
          "example": "NO"
        }
      },
      "type": "object",
      "required": [
        "addressLine1",
        "city",
        "country",
        "zipCode"
      ]
    },
    "OrderStatusInfoTransactionInfo": {
      "properties": {
        "amount": {
          "format": "double",
          "type": "number",
          "description": "Ordered amount in øre",
          "example": 20000
        },
        "status": {
          "enum": [
            "INITIATE",
            "REGISTER",
            "RESERVE",
            "SALE",
            "CAPTURE",
            "REFUND",
            "CANCEL",
            "VOID",
            "FAILED",
            "REJECTED"
          ],
          "type": "string",
          "description": "Status which gives the current state of the payment within Vipps. See the [API guide](https://github.com/vippsas/vipps-ecom-api/blob/master/vipps-ecom-api.md#responses-from-requests) for more information.",
          "example": "RESERVE"
        },
        "timeStamp": {
          "type": "string",
          "description": "Timestamp in ISO-8601 representing when Vipps cancelled the transaction.",
          "example": "2018-12-12T11:18:38.246Z"
        },
        "transactionId": {
          "type": "string",
          "description": "Vipps transaction id",
          "example": "5001420062"
        }
      },
      "type": "object",
      "required": [
        "amount",
        "status",
        "timeStamp",
        "transactionId"
      ]
    },
    "FetchShippingCostAndMethod": {
      "properties": {
        "addressLine2": {
          "type": "string"
        },
        "city": {
          "type": "string",
          "description": "City",
          "example": "Oslo"
        },
        "country": {
          "type": "string",
          "description": "The only country supported is Norway",
          "example": "NO"
        },
        "addressLine1": {
          "type": "string",
          "example": "Dronning Eufemias gate 42"
        },
        "addressType": {
          "type": "string",
          "example": "H"
        },
        "addressId": {
          "format": "int32",
          "type": "integer",
          "description": "Vipps Provided address Id. To be returned in response in the same field"
        },
        "postCode": {
          "format": "int32",
          "type": "integer",
          "description": "Four digits",
          "example": "0191",
          "pattern": "^\\df{4}$"
        },
        "postalCode": {
          "format": "int32",
          "type": "integer",
          "description": "Four digits",
          "example": "0191",
          "pattern": "^\\df{4}$"
        }
      },
      "type": "object",
      "required": [
        "addressId",
        "addressLine1",
        "city",
        "country",
        "postCode"
      ]
    },
    "InitiatePaymentCommand": {
      "properties": {
        "merchantInfo": {
          "description": "it has merchant related information to initiate the payment",
          "$ref": "#/definitions/MerchantInfoDto"
        },
        "transaction": {
          "description": "it has transaction details which needs to be inititated",
          "$ref": "#/definitions/TransactionInfoInitiateDTO"
        },
        "customerInfo": {
          "description": "it has customer information and it is not required",
          "$ref": "#/definitions/CustomerInfoDto"
        }
      },
      "type": "object",
      "required": [
        "customerInfo",
        "merchantInfo",
        "transaction"
      ]
    },
    "CustomerInfoDto": {
      "properties": {
        "mobileNumber": {
          "type": "string",
          "description": "Mobile number of the user who has to pay for the transation from Vipps. Allowed format: xxxxxxxx",
          "maxLength": 8,
          "pattern": "^\\d{8}$",
          "example": 91234567,
          "minLength": 8
        }
      },
      "type": "object"
    },
    "PaymentShippingDetails": {
      "properties": {
        "shippingMethod": {
          "type": "string",
          "description": "Shipping method",
          "example": "Posten"
        },
        "address": {
          "$ref": "#/definitions/Address"
        },
        "shippingCost": {
          "format": "double",
          "type": "number",
          "description": "Shipping Cost",
          "example": 1500
        }
      },
      "type": "object",
      "required": [
        "shippingCost",
        "shippingMethod"
      ]
    }
  }
}